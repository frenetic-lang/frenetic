# OASIS_START
# DO NOT EDIT (digest: 3eb5d6f947da520c5afad5d115c159f0)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library frenetic
"lib/frenetic.cmxs": use_frenetic
<lib/*.ml{,i,y}>: package(base64)
<lib/*.ml{,i,y}>: package(camlp4)
<lib/*.ml{,i,y}>: package(camlp4.extend)
<lib/*.ml{,i,y}>: package(camlp4.lib)
<lib/*.ml{,i,y}>: package(core)
<lib/*.ml{,i,y}>: package(cstruct)
<lib/*.ml{,i,y}>: package(ocamlgraph)
<lib/*.ml{,i,y}>: package(ppx_deriving.enum)
<lib/*.ml{,i,y}>: package(ppx_deriving.eq)
<lib/*.ml{,i,y}>: package(ppx_jane)
<lib/*.ml{,i,y}>: package(str)
<lib/*.ml{,i,y}>: package(tcpip)
<lib/*.ml{,i,y}>: package(threads)
<lib/*.ml{,i,y}>: package(ulex)
<lib/*.ml{,i,y}>: package(yojson)
# Library async
"async/async.cmxs": use_async
<async/*.ml{,i,y}>: package(async)
<async/*.ml{,i,y}>: package(base64)
<async/*.ml{,i,y}>: package(camlp4)
<async/*.ml{,i,y}>: package(camlp4.extend)
<async/*.ml{,i,y}>: package(camlp4.lib)
<async/*.ml{,i,y}>: package(cohttp)
<async/*.ml{,i,y}>: package(cohttp.async)
<async/*.ml{,i,y}>: package(core)
<async/*.ml{,i,y}>: package(cstruct)
<async/*.ml{,i,y}>: package(cstruct.async)
<async/*.ml{,i,y}>: package(mparser)
<async/*.ml{,i,y}>: package(mparser.re)
<async/*.ml{,i,y}>: package(ocamlgraph)
<async/*.ml{,i,y}>: package(ppx_deriving.enum)
<async/*.ml{,i,y}>: package(ppx_deriving.eq)
<async/*.ml{,i,y}>: package(ppx_jane)
<async/*.ml{,i,y}>: package(ppx_sexp_conv)
<async/*.ml{,i,y}>: package(str)
<async/*.ml{,i,y}>: package(tcpip)
<async/*.ml{,i,y}>: package(threads)
<async/*.ml{,i,y}>: package(ulex)
<async/*.ml{,i,y}>: package(yojson)
<async/*.ml{,i,y}>: use_frenetic
# Executable frenetic
"frenetic/frenetic.native": package(async)
"frenetic/frenetic.native": package(async_extended)
"frenetic/frenetic.native": package(base64)
"frenetic/frenetic.native": package(camlp4)
"frenetic/frenetic.native": package(camlp4.extend)
"frenetic/frenetic.native": package(camlp4.lib)
"frenetic/frenetic.native": package(cohttp)
"frenetic/frenetic.native": package(cohttp.async)
"frenetic/frenetic.native": package(core)
"frenetic/frenetic.native": package(cstruct)
"frenetic/frenetic.native": package(cstruct.async)
"frenetic/frenetic.native": package(mparser)
"frenetic/frenetic.native": package(mparser.re)
"frenetic/frenetic.native": package(ocamlgraph)
"frenetic/frenetic.native": package(ppx_deriving.enum)
"frenetic/frenetic.native": package(ppx_deriving.eq)
"frenetic/frenetic.native": package(ppx_jane)
"frenetic/frenetic.native": package(ppx_sexp_conv)
"frenetic/frenetic.native": package(str)
"frenetic/frenetic.native": package(tcpip)
"frenetic/frenetic.native": package(threads)
"frenetic/frenetic.native": package(ulex)
"frenetic/frenetic.native": package(yojson)
"frenetic/frenetic.native": use_async
"frenetic/frenetic.native": use_frenetic
# Executable openflow
"frenetic/openflow.native": package(async)
"frenetic/openflow.native": package(async_extended)
"frenetic/openflow.native": package(base64)
"frenetic/openflow.native": package(camlp4)
"frenetic/openflow.native": package(camlp4.extend)
"frenetic/openflow.native": package(camlp4.lib)
"frenetic/openflow.native": package(cohttp)
"frenetic/openflow.native": package(cohttp.async)
"frenetic/openflow.native": package(core)
"frenetic/openflow.native": package(cstruct)
"frenetic/openflow.native": package(cstruct.async)
"frenetic/openflow.native": package(mparser)
"frenetic/openflow.native": package(mparser.re)
"frenetic/openflow.native": package(ocamlgraph)
"frenetic/openflow.native": package(ppx_deriving.enum)
"frenetic/openflow.native": package(ppx_deriving.eq)
"frenetic/openflow.native": package(ppx_jane)
"frenetic/openflow.native": package(ppx_sexp_conv)
"frenetic/openflow.native": package(str)
"frenetic/openflow.native": package(tcpip)
"frenetic/openflow.native": package(threads)
"frenetic/openflow.native": package(ulex)
"frenetic/openflow.native": package(yojson)
"frenetic/openflow.native": use_async
"frenetic/openflow.native": use_frenetic
<frenetic/*.ml{,i,y}>: package(async)
<frenetic/*.ml{,i,y}>: package(async_extended)
<frenetic/*.ml{,i,y}>: package(base64)
<frenetic/*.ml{,i,y}>: package(camlp4)
<frenetic/*.ml{,i,y}>: package(camlp4.extend)
<frenetic/*.ml{,i,y}>: package(camlp4.lib)
<frenetic/*.ml{,i,y}>: package(cohttp)
<frenetic/*.ml{,i,y}>: package(cohttp.async)
<frenetic/*.ml{,i,y}>: package(core)
<frenetic/*.ml{,i,y}>: package(cstruct)
<frenetic/*.ml{,i,y}>: package(cstruct.async)
<frenetic/*.ml{,i,y}>: package(mparser)
<frenetic/*.ml{,i,y}>: package(mparser.re)
<frenetic/*.ml{,i,y}>: package(ocamlgraph)
<frenetic/*.ml{,i,y}>: package(ppx_deriving.enum)
<frenetic/*.ml{,i,y}>: package(ppx_deriving.eq)
<frenetic/*.ml{,i,y}>: package(ppx_jane)
<frenetic/*.ml{,i,y}>: package(ppx_sexp_conv)
<frenetic/*.ml{,i,y}>: package(str)
<frenetic/*.ml{,i,y}>: package(tcpip)
<frenetic/*.ml{,i,y}>: package(threads)
<frenetic/*.ml{,i,y}>: package(ulex)
<frenetic/*.ml{,i,y}>: package(yojson)
<frenetic/*.ml{,i,y}>: use_async
<frenetic/*.ml{,i,y}>: use_frenetic
# Library syntax
"syntax/syntax.cmxs": use_syntax
<syntax/*.ml{,i,y}>: package(base64)
<syntax/*.ml{,i,y}>: package(camlp4)
<syntax/*.ml{,i,y}>: package(camlp4.extend)
<syntax/*.ml{,i,y}>: package(camlp4.lib)
<syntax/*.ml{,i,y}>: package(camlp4.quotations.o)
<syntax/*.ml{,i,y}>: package(core)
<syntax/*.ml{,i,y}>: package(cstruct)
<syntax/*.ml{,i,y}>: package(ipaddr)
<syntax/*.ml{,i,y}>: package(ocamlgraph)
<syntax/*.ml{,i,y}>: package(ppx_deriving.enum)
<syntax/*.ml{,i,y}>: package(ppx_deriving.eq)
<syntax/*.ml{,i,y}>: package(ppx_jane)
<syntax/*.ml{,i,y}>: package(str)
<syntax/*.ml{,i,y}>: package(tcpip)
<syntax/*.ml{,i,y}>: package(threads)
<syntax/*.ml{,i,y}>: package(ulex)
<syntax/*.ml{,i,y}>: package(yojson)
<syntax/*.ml{,i,y}>: use_frenetic
# Library test_frenetic
"lib_test/lib/test_frenetic.cmxs": use_test_frenetic
<lib_test/lib/*.ml{,i,y}>: package(base64)
<lib_test/lib/*.ml{,i,y}>: package(camlp4)
<lib_test/lib/*.ml{,i,y}>: package(camlp4.extend)
<lib_test/lib/*.ml{,i,y}>: package(camlp4.lib)
<lib_test/lib/*.ml{,i,y}>: package(core)
<lib_test/lib/*.ml{,i,y}>: package(cstruct)
<lib_test/lib/*.ml{,i,y}>: package(ocamlgraph)
<lib_test/lib/*.ml{,i,y}>: package(ppx_deriving.enum)
<lib_test/lib/*.ml{,i,y}>: package(ppx_deriving.eq)
<lib_test/lib/*.ml{,i,y}>: package(ppx_jane)
<lib_test/lib/*.ml{,i,y}>: package(quickcheck)
<lib_test/lib/*.ml{,i,y}>: package(str)
<lib_test/lib/*.ml{,i,y}>: package(tcpip)
<lib_test/lib/*.ml{,i,y}>: package(threads)
<lib_test/lib/*.ml{,i,y}>: package(ulex)
<lib_test/lib/*.ml{,i,y}>: package(yojson)
<lib_test/lib/*.ml{,i,y}>: use_frenetic
# Executable testtool
"lib_test/Test.byte": package(async)
"lib_test/Test.byte": package(base64)
"lib_test/Test.byte": package(camlp4)
"lib_test/Test.byte": package(camlp4.extend)
"lib_test/Test.byte": package(camlp4.lib)
"lib_test/Test.byte": package(cohttp)
"lib_test/Test.byte": package(cohttp.async)
"lib_test/Test.byte": package(core)
"lib_test/Test.byte": package(cstruct)
"lib_test/Test.byte": package(cstruct.async)
"lib_test/Test.byte": package(mparser)
"lib_test/Test.byte": package(mparser.re)
"lib_test/Test.byte": package(ocamlgraph)
"lib_test/Test.byte": package(ppx_deriving.enum)
"lib_test/Test.byte": package(ppx_deriving.eq)
"lib_test/Test.byte": package(ppx_inline_test)
"lib_test/Test.byte": package(ppx_jane)
"lib_test/Test.byte": package(ppx_sexp_conv)
"lib_test/Test.byte": package(quickcheck)
"lib_test/Test.byte": package(str)
"lib_test/Test.byte": package(tcpip)
"lib_test/Test.byte": package(threads)
"lib_test/Test.byte": package(ulex)
"lib_test/Test.byte": package(yojson)
"lib_test/Test.byte": use_async
"lib_test/Test.byte": use_frenetic
"lib_test/Test.byte": use_test_frenetic
<lib_test/*.ml{,i,y}>: package(async)
<lib_test/*.ml{,i,y}>: package(base64)
<lib_test/*.ml{,i,y}>: package(camlp4)
<lib_test/*.ml{,i,y}>: package(camlp4.extend)
<lib_test/*.ml{,i,y}>: package(camlp4.lib)
<lib_test/*.ml{,i,y}>: package(cohttp)
<lib_test/*.ml{,i,y}>: package(cohttp.async)
<lib_test/*.ml{,i,y}>: package(core)
<lib_test/*.ml{,i,y}>: package(cstruct)
<lib_test/*.ml{,i,y}>: package(cstruct.async)
<lib_test/*.ml{,i,y}>: package(mparser)
<lib_test/*.ml{,i,y}>: package(mparser.re)
<lib_test/*.ml{,i,y}>: package(ocamlgraph)
<lib_test/*.ml{,i,y}>: package(ppx_deriving.enum)
<lib_test/*.ml{,i,y}>: package(ppx_deriving.eq)
<lib_test/*.ml{,i,y}>: package(ppx_inline_test)
<lib_test/*.ml{,i,y}>: package(ppx_jane)
<lib_test/*.ml{,i,y}>: package(ppx_sexp_conv)
<lib_test/*.ml{,i,y}>: package(quickcheck)
<lib_test/*.ml{,i,y}>: package(str)
<lib_test/*.ml{,i,y}>: package(tcpip)
<lib_test/*.ml{,i,y}>: package(threads)
<lib_test/*.ml{,i,y}>: package(ulex)
<lib_test/*.ml{,i,y}>: package(yojson)
<lib_test/*.ml{,i,y}>: use_async
<lib_test/*.ml{,i,y}>: use_frenetic
<lib_test/*.ml{,i,y}>: use_test_frenetic
# OASIS_STOP
<lib/Frenetic_NetKAT_Parser.ml{,i}>: syntax_camlp4o
<lib/Frenetic_NetKAT_Lexer.ml{,i}>: syntax_camlp4o
<syntax/Frenetic_Syntax_Extension_Parser.ml{,i}>: syntax_camlp4o
<syntax/Frenetic_Syntax_Extension_Quotations.ml{,i}>: syntax_camlp4o
<lib_test/*.ml{,i}>: predicate(ppx_driver)
<lib_test/*.ml{,i}>: pp(ppx-jane -dump-ast -inline-test-lib frenetic)
true: thread
true: -traverse
