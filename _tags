# OASIS_START
# DO NOT EDIT (digest: cffb4113e5060bdcd755e1f1d5fb1832)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library netcore
"lib/netcore.cmxs": use_netcore
<lib/*.ml{,i}>: package(packet)
<lib/*.ml{,i}>: package(cstruct)
<lib/*.ml{,i}>: package(ocamlgraph)
<lib/*.ml{,i}>: package(openflow)
<lib/*.ml{,i}>: package(threads)
<lib/*.ml{,i}>: package(topology)
<lib/*.ml{,i}>: package(sexplib)
<lib/*.ml{,i}>: package(sexplib.syntax)
<lib/*.ml{,i}>: package(fieldslib)
<lib/*.ml{,i}>: package(fieldslib.syntax)
<lib/*.ml{,i}>: package(str)
# Library async
"async/async.cmxs": use_async
<async/*.ml{,i}>: use_netcore
<async/*.ml{,i}>: package(async)
<async/*.ml{,i}>: package(core)
<async/*.ml{,i}>: package(packet)
<async/*.ml{,i}>: package(cstruct)
<async/*.ml{,i}>: package(cstruct.async)
<async/*.ml{,i}>: package(ocamlgraph)
<async/*.ml{,i}>: package(openflow)
<async/*.ml{,i}>: package(openflow.async)
<async/*.ml{,i}>: package(threads)
<async/*.ml{,i}>: package(textutils)
<async/*.ml{,i}>: package(topology)
<async/*.ml{,i}>: package(sexplib)
<async/*.ml{,i}>: package(sexplib.syntax)
<async/*.ml{,i}>: package(fieldslib)
<async/*.ml{,i}>: package(fieldslib.syntax)
<async/*.ml{,i}>: package(str)
# Library quickcheck
"quickcheck/quickcheck.cmxs": use_quickcheck
<quickcheck/*.ml{,i}>: use_netcore
<quickcheck/*.ml{,i}>: package(packet)
<quickcheck/*.ml{,i}>: package(quickcheck)
<quickcheck/*.ml{,i}>: package(openflow.quickcheck)
<quickcheck/*.ml{,i}>: package(cstruct)
<quickcheck/*.ml{,i}>: package(ocamlgraph)
<quickcheck/*.ml{,i}>: package(openflow)
<quickcheck/*.ml{,i}>: package(threads)
<quickcheck/*.ml{,i}>: package(topology)
<quickcheck/*.ml{,i}>: package(sexplib)
<quickcheck/*.ml{,i}>: package(sexplib.syntax)
<quickcheck/*.ml{,i}>: package(fieldslib)
<quickcheck/*.ml{,i}>: package(fieldslib.syntax)
<quickcheck/*.ml{,i}>: package(str)
# Executable testtool
"test/Test.byte": use_quickcheck
"test/Test.byte": use_netcore
"test/Test.byte": package(oUnit)
"test/Test.byte": package(packet)
"test/Test.byte": package(pa_ounit)
"test/Test.byte": package(pa_ounit.syntax)
"test/Test.byte": package(quickcheck)
"test/Test.byte": package(openflow.quickcheck)
"test/Test.byte": package(cstruct)
"test/Test.byte": package(ocamlgraph)
"test/Test.byte": package(openflow)
"test/Test.byte": package(threads)
"test/Test.byte": package(topology)
"test/Test.byte": package(sexplib)
"test/Test.byte": package(sexplib.syntax)
"test/Test.byte": package(fieldslib)
"test/Test.byte": package(fieldslib.syntax)
"test/Test.byte": package(str)
<test/*.ml{,i}>: use_quickcheck
<test/*.ml{,i}>: use_netcore
<test/*.ml{,i}>: package(oUnit)
<test/*.ml{,i}>: package(packet)
<test/*.ml{,i}>: package(pa_ounit)
<test/*.ml{,i}>: package(pa_ounit.syntax)
<test/*.ml{,i}>: package(quickcheck)
<test/*.ml{,i}>: package(openflow.quickcheck)
<test/*.ml{,i}>: package(cstruct)
<test/*.ml{,i}>: package(ocamlgraph)
<test/*.ml{,i}>: package(openflow)
<test/*.ml{,i}>: package(threads)
<test/*.ml{,i}>: package(topology)
<test/*.ml{,i}>: package(sexplib)
<test/*.ml{,i}>: package(sexplib.syntax)
<test/*.ml{,i}>: package(fieldslib)
<test/*.ml{,i}>: package(fieldslib.syntax)
<test/*.ml{,i}>: package(str)
# Executable katnetic
"frenetic/katnetic.byte": use_async
"frenetic/katnetic.byte": use_netcore
"frenetic/katnetic.byte": package(async)
"frenetic/katnetic.byte": package(core)
"frenetic/katnetic.byte": package(packet)
"frenetic/katnetic.byte": package(cstruct)
"frenetic/katnetic.byte": package(cstruct.async)
"frenetic/katnetic.byte": package(ocamlgraph)
"frenetic/katnetic.byte": package(openflow)
"frenetic/katnetic.byte": package(openflow.async)
"frenetic/katnetic.byte": package(threads)
"frenetic/katnetic.byte": package(textutils)
"frenetic/katnetic.byte": package(topology)
"frenetic/katnetic.byte": package(sexplib)
"frenetic/katnetic.byte": package(sexplib.syntax)
"frenetic/katnetic.byte": package(fieldslib)
"frenetic/katnetic.byte": package(fieldslib.syntax)
"frenetic/katnetic.byte": package(str)
# Executable netkat_test
"frenetic/netkat_test.byte": use_async
"frenetic/netkat_test.byte": use_netcore
"frenetic/netkat_test.byte": package(async)
"frenetic/netkat_test.byte": package(core)
"frenetic/netkat_test.byte": package(packet)
"frenetic/netkat_test.byte": package(cstruct)
"frenetic/netkat_test.byte": package(cstruct.async)
"frenetic/netkat_test.byte": package(ocamlgraph)
"frenetic/netkat_test.byte": package(openflow)
"frenetic/netkat_test.byte": package(openflow.async)
"frenetic/netkat_test.byte": package(threads)
"frenetic/netkat_test.byte": package(textutils)
"frenetic/netkat_test.byte": package(topology)
"frenetic/netkat_test.byte": package(sexplib)
"frenetic/netkat_test.byte": package(sexplib.syntax)
"frenetic/netkat_test.byte": package(fieldslib)
"frenetic/netkat_test.byte": package(fieldslib.syntax)
"frenetic/netkat_test.byte": package(str)
<frenetic/*.ml{,i}>: use_async
<frenetic/*.ml{,i}>: use_netcore
<frenetic/*.ml{,i}>: package(async)
<frenetic/*.ml{,i}>: package(core)
<frenetic/*.ml{,i}>: package(packet)
<frenetic/*.ml{,i}>: package(cstruct)
<frenetic/*.ml{,i}>: package(cstruct.async)
<frenetic/*.ml{,i}>: package(ocamlgraph)
<frenetic/*.ml{,i}>: package(openflow)
<frenetic/*.ml{,i}>: package(openflow.async)
<frenetic/*.ml{,i}>: package(threads)
<frenetic/*.ml{,i}>: package(textutils)
<frenetic/*.ml{,i}>: package(topology)
<frenetic/*.ml{,i}>: package(sexplib)
<frenetic/*.ml{,i}>: package(sexplib.syntax)
<frenetic/*.ml{,i}>: package(fieldslib)
<frenetic/*.ml{,i}>: package(fieldslib.syntax)
<frenetic/*.ml{,i}>: package(str)
# OASIS_STOP
<test/*.ml>: syntax_camlp4o
<lib/*.ml>: syntax_camlp4o
<async/*.ml>: syntax_camlp4o
true: thread
