# OASIS_START
# DO NOT EDIT (digest: c4706f34c76a426a5c04b9bc9f1a20da)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library netcore
"lib/netcore.cmxs": use_netcore
<lib/*.ml{,i}>: pkg_packet
<lib/*.ml{,i}>: pkg_cstruct
<lib/*.ml{,i}>: pkg_ocamlgraph
<lib/*.ml{,i}>: pkg_openflow
<lib/*.ml{,i}>: pkg_threads
<lib/*.ml{,i}>: pkg_topology
<lib/*.ml{,i}>: pkg_sexplib
<lib/*.ml{,i}>: pkg_sexplib.syntax
<lib/*.ml{,i}>: pkg_fieldslib
<lib/*.ml{,i}>: pkg_fieldslib.syntax
<lib/*.ml{,i}>: pkg_str
# Library async
"async/async.cmxs": use_async
<async/*.ml{,i}>: use_netcore
<async/*.ml{,i}>: pkg_async
<async/*.ml{,i}>: pkg_core
<async/*.ml{,i}>: pkg_packet
<async/*.ml{,i}>: pkg_cstruct
<async/*.ml{,i}>: pkg_cstruct.async
<async/*.ml{,i}>: pkg_ocamlgraph
<async/*.ml{,i}>: pkg_openflow
<async/*.ml{,i}>: pkg_openflow.async
<async/*.ml{,i}>: pkg_threads
<async/*.ml{,i}>: pkg_textutils
<async/*.ml{,i}>: pkg_topology
<async/*.ml{,i}>: pkg_sexplib
<async/*.ml{,i}>: pkg_sexplib.syntax
<async/*.ml{,i}>: pkg_fieldslib
<async/*.ml{,i}>: pkg_fieldslib.syntax
<async/*.ml{,i}>: pkg_str
# Library quickcheck
"quickcheck/quickcheck.cmxs": use_quickcheck
<quickcheck/*.ml{,i}>: use_netcore
<quickcheck/*.ml{,i}>: pkg_packet
<quickcheck/*.ml{,i}>: pkg_quickcheck
<quickcheck/*.ml{,i}>: pkg_openflow.quickcheck
<quickcheck/*.ml{,i}>: pkg_cstruct
<quickcheck/*.ml{,i}>: pkg_ocamlgraph
<quickcheck/*.ml{,i}>: pkg_openflow
<quickcheck/*.ml{,i}>: pkg_threads
<quickcheck/*.ml{,i}>: pkg_topology
<quickcheck/*.ml{,i}>: pkg_sexplib
<quickcheck/*.ml{,i}>: pkg_sexplib.syntax
<quickcheck/*.ml{,i}>: pkg_fieldslib
<quickcheck/*.ml{,i}>: pkg_fieldslib.syntax
<quickcheck/*.ml{,i}>: pkg_str
# Executable testtool
"test/Test.byte": use_quickcheck
"test/Test.byte": use_netcore
"test/Test.byte": pkg_oUnit
"test/Test.byte": pkg_packet
"test/Test.byte": pkg_pa_ounit
"test/Test.byte": pkg_pa_ounit.syntax
"test/Test.byte": pkg_quickcheck
"test/Test.byte": pkg_openflow.quickcheck
"test/Test.byte": pkg_cstruct
"test/Test.byte": pkg_ocamlgraph
"test/Test.byte": pkg_openflow
"test/Test.byte": pkg_threads
"test/Test.byte": pkg_topology
"test/Test.byte": pkg_sexplib
"test/Test.byte": pkg_sexplib.syntax
"test/Test.byte": pkg_fieldslib
"test/Test.byte": pkg_fieldslib.syntax
"test/Test.byte": pkg_str
<test/*.ml{,i}>: use_quickcheck
<test/*.ml{,i}>: use_netcore
<test/*.ml{,i}>: pkg_oUnit
<test/*.ml{,i}>: pkg_packet
<test/*.ml{,i}>: pkg_pa_ounit
<test/*.ml{,i}>: pkg_pa_ounit.syntax
<test/*.ml{,i}>: pkg_quickcheck
<test/*.ml{,i}>: pkg_openflow.quickcheck
<test/*.ml{,i}>: pkg_cstruct
<test/*.ml{,i}>: pkg_ocamlgraph
<test/*.ml{,i}>: pkg_openflow
<test/*.ml{,i}>: pkg_threads
<test/*.ml{,i}>: pkg_topology
<test/*.ml{,i}>: pkg_sexplib
<test/*.ml{,i}>: pkg_sexplib.syntax
<test/*.ml{,i}>: pkg_fieldslib
<test/*.ml{,i}>: pkg_fieldslib.syntax
<test/*.ml{,i}>: pkg_str
# Executable katnetic
"frenetic/katnetic.byte": use_async
"frenetic/katnetic.byte": use_netcore
"frenetic/katnetic.byte": pkg_async
"frenetic/katnetic.byte": pkg_core
"frenetic/katnetic.byte": pkg_packet
"frenetic/katnetic.byte": pkg_cstruct
"frenetic/katnetic.byte": pkg_cstruct.async
"frenetic/katnetic.byte": pkg_ocamlgraph
"frenetic/katnetic.byte": pkg_openflow
"frenetic/katnetic.byte": pkg_openflow.async
"frenetic/katnetic.byte": pkg_threads
"frenetic/katnetic.byte": pkg_textutils
"frenetic/katnetic.byte": pkg_topology
"frenetic/katnetic.byte": pkg_sexplib
"frenetic/katnetic.byte": pkg_sexplib.syntax
"frenetic/katnetic.byte": pkg_fieldslib
"frenetic/katnetic.byte": pkg_fieldslib.syntax
"frenetic/katnetic.byte": pkg_str
# Executable netkat_test
"frenetic/netkat_test.byte": use_async
"frenetic/netkat_test.byte": use_netcore
"frenetic/netkat_test.byte": pkg_async
"frenetic/netkat_test.byte": pkg_core
"frenetic/netkat_test.byte": pkg_packet
"frenetic/netkat_test.byte": pkg_cstruct
"frenetic/netkat_test.byte": pkg_cstruct.async
"frenetic/netkat_test.byte": pkg_ocamlgraph
"frenetic/netkat_test.byte": pkg_openflow
"frenetic/netkat_test.byte": pkg_openflow.async
"frenetic/netkat_test.byte": pkg_threads
"frenetic/netkat_test.byte": pkg_textutils
"frenetic/netkat_test.byte": pkg_topology
"frenetic/netkat_test.byte": pkg_sexplib
"frenetic/netkat_test.byte": pkg_sexplib.syntax
"frenetic/netkat_test.byte": pkg_fieldslib
"frenetic/netkat_test.byte": pkg_fieldslib.syntax
"frenetic/netkat_test.byte": pkg_str
<frenetic/*.ml{,i}>: use_async
<frenetic/*.ml{,i}>: use_netcore
<frenetic/*.ml{,i}>: pkg_async
<frenetic/*.ml{,i}>: pkg_core
<frenetic/*.ml{,i}>: pkg_packet
<frenetic/*.ml{,i}>: pkg_cstruct
<frenetic/*.ml{,i}>: pkg_cstruct.async
<frenetic/*.ml{,i}>: pkg_ocamlgraph
<frenetic/*.ml{,i}>: pkg_openflow
<frenetic/*.ml{,i}>: pkg_openflow.async
<frenetic/*.ml{,i}>: pkg_threads
<frenetic/*.ml{,i}>: pkg_textutils
<frenetic/*.ml{,i}>: pkg_topology
<frenetic/*.ml{,i}>: pkg_sexplib
<frenetic/*.ml{,i}>: pkg_sexplib.syntax
<frenetic/*.ml{,i}>: pkg_fieldslib
<frenetic/*.ml{,i}>: pkg_fieldslib.syntax
<frenetic/*.ml{,i}>: pkg_str
# OASIS_STOP
<test/*.ml>: syntax_camlp4o
<lib/*.ml>: syntax_camlp4o
<async/*.ml>: syntax_camlp4o
true: thread
