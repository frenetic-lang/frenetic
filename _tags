# OASIS_START
# DO NOT EDIT (digest: 6700910c6486c724facae7aabf067905)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library frenetic
"lib/frenetic.cmxs": use_frenetic
<lib/*.ml{,i,y}>: package(base64)
<lib/*.ml{,i,y}>: package(compiler-libs.common)
<lib/*.ml{,i,y}>: package(core)
<lib/*.ml{,i,y}>: package(cstruct)
<lib/*.ml{,i,y}>: package(cstruct.ppx)
<lib/*.ml{,i,y}>: package(ipaddr)
<lib/*.ml{,i,y}>: package(menhirLib)
<lib/*.ml{,i,y}>: package(ocamlgraph)
<lib/*.ml{,i,y}>: package(ppx_compare)
<lib/*.ml{,i,y}>: package(ppx_deriving.std)
<lib/*.ml{,i,y}>: package(ppx_enumerate)
<lib/*.ml{,i,y}>: package(ppx_fields_conv)
<lib/*.ml{,i,y}>: package(ppx_sexp_conv)
<lib/*.ml{,i,y}>: package(ppx_type_conv)
<lib/*.ml{,i,y}>: package(sedlex)
<lib/*.ml{,i,y}>: package(sexplib)
<lib/*.ml{,i,y}>: package(str)
<lib/*.ml{,i,y}>: package(tcpip)
<lib/*.ml{,i,y}>: package(tcpip.unix)
<lib/*.ml{,i,y}>: package(threads)
<lib/*.ml{,i,y}>: package(yojson)
# Library ppx
"ppx/ppx.cmxs": use_ppx
# Executable ppx
<ppx/ppx.{native,byte}>: package(base64)
<ppx/ppx.{native,byte}>: package(compiler-libs.common)
<ppx/ppx.{native,byte}>: package(core)
<ppx/ppx.{native,byte}>: package(cstruct)
<ppx/ppx.{native,byte}>: package(cstruct.ppx)
<ppx/ppx.{native,byte}>: package(ipaddr)
<ppx/ppx.{native,byte}>: package(menhirLib)
<ppx/ppx.{native,byte}>: package(ocamlgraph)
<ppx/ppx.{native,byte}>: package(ppx_compare)
<ppx/ppx.{native,byte}>: package(ppx_deriving.std)
<ppx/ppx.{native,byte}>: package(ppx_enumerate)
<ppx/ppx.{native,byte}>: package(ppx_fields_conv)
<ppx/ppx.{native,byte}>: package(ppx_sexp_conv)
<ppx/ppx.{native,byte}>: package(ppx_tools)
<ppx/ppx.{native,byte}>: package(ppx_tools.metaquot)
<ppx/ppx.{native,byte}>: package(ppx_type_conv)
<ppx/ppx.{native,byte}>: package(sedlex)
<ppx/ppx.{native,byte}>: package(sexplib)
<ppx/ppx.{native,byte}>: package(str)
<ppx/ppx.{native,byte}>: package(tcpip)
<ppx/ppx.{native,byte}>: package(tcpip.unix)
<ppx/ppx.{native,byte}>: package(threads)
<ppx/ppx.{native,byte}>: package(yojson)
<ppx/ppx.{native,byte}>: use_frenetic
<ppx/ppx.{native,byte}>: use_ppx
# Executable ppx_standalone
<ppx/ppx_standalone.{native,byte}>: package(base64)
<ppx/ppx_standalone.{native,byte}>: package(compiler-libs.common)
<ppx/ppx_standalone.{native,byte}>: package(core)
<ppx/ppx_standalone.{native,byte}>: package(cstruct)
<ppx/ppx_standalone.{native,byte}>: package(cstruct.ppx)
<ppx/ppx_standalone.{native,byte}>: package(ipaddr)
<ppx/ppx_standalone.{native,byte}>: package(menhirLib)
<ppx/ppx_standalone.{native,byte}>: package(ocamlgraph)
<ppx/ppx_standalone.{native,byte}>: package(ppx_compare)
<ppx/ppx_standalone.{native,byte}>: package(ppx_deriving.std)
<ppx/ppx_standalone.{native,byte}>: package(ppx_enumerate)
<ppx/ppx_standalone.{native,byte}>: package(ppx_fields_conv)
<ppx/ppx_standalone.{native,byte}>: package(ppx_sexp_conv)
<ppx/ppx_standalone.{native,byte}>: package(ppx_tools)
<ppx/ppx_standalone.{native,byte}>: package(ppx_tools.metaquot)
<ppx/ppx_standalone.{native,byte}>: package(ppx_type_conv)
<ppx/ppx_standalone.{native,byte}>: package(sedlex)
<ppx/ppx_standalone.{native,byte}>: package(sexplib)
<ppx/ppx_standalone.{native,byte}>: package(str)
<ppx/ppx_standalone.{native,byte}>: package(tcpip)
<ppx/ppx_standalone.{native,byte}>: package(tcpip.unix)
<ppx/ppx_standalone.{native,byte}>: package(threads)
<ppx/ppx_standalone.{native,byte}>: package(yojson)
<ppx/ppx_standalone.{native,byte}>: use_frenetic
<ppx/ppx_standalone.{native,byte}>: use_ppx
<ppx/*.ml{,i,y}>: package(base64)
<ppx/*.ml{,i,y}>: package(compiler-libs.common)
<ppx/*.ml{,i,y}>: package(core)
<ppx/*.ml{,i,y}>: package(cstruct)
<ppx/*.ml{,i,y}>: package(cstruct.ppx)
<ppx/*.ml{,i,y}>: package(ipaddr)
<ppx/*.ml{,i,y}>: package(menhirLib)
<ppx/*.ml{,i,y}>: package(ocamlgraph)
<ppx/*.ml{,i,y}>: package(ppx_compare)
<ppx/*.ml{,i,y}>: package(ppx_deriving.std)
<ppx/*.ml{,i,y}>: package(ppx_enumerate)
<ppx/*.ml{,i,y}>: package(ppx_fields_conv)
<ppx/*.ml{,i,y}>: package(ppx_sexp_conv)
<ppx/*.ml{,i,y}>: package(ppx_tools)
<ppx/*.ml{,i,y}>: package(ppx_tools.metaquot)
<ppx/*.ml{,i,y}>: package(ppx_type_conv)
<ppx/*.ml{,i,y}>: package(sedlex)
<ppx/*.ml{,i,y}>: package(sexplib)
<ppx/*.ml{,i,y}>: package(str)
<ppx/*.ml{,i,y}>: package(tcpip)
<ppx/*.ml{,i,y}>: package(tcpip.unix)
<ppx/*.ml{,i,y}>: package(threads)
<ppx/*.ml{,i,y}>: package(yojson)
<ppx/*.ml{,i,y}>: use_frenetic
<ppx/*.ml{,i,y}>: use_ppx
# Library frenetic_async
"async/frenetic_async.cmxs": use_frenetic_async
<async/*.ml{,i,y}>: package(async)
<async/*.ml{,i,y}>: package(base64)
<async/*.ml{,i,y}>: package(cohttp)
<async/*.ml{,i,y}>: package(cohttp.async)
<async/*.ml{,i,y}>: package(compiler-libs.common)
<async/*.ml{,i,y}>: package(core)
<async/*.ml{,i,y}>: package(cstruct)
<async/*.ml{,i,y}>: package(cstruct-async)
<async/*.ml{,i,y}>: package(cstruct.async)
<async/*.ml{,i,y}>: package(cstruct.ppx)
<async/*.ml{,i,y}>: package(ipaddr)
<async/*.ml{,i,y}>: package(menhirLib)
<async/*.ml{,i,y}>: package(mparser)
<async/*.ml{,i,y}>: package(mparser.re)
<async/*.ml{,i,y}>: package(ocamlgraph)
<async/*.ml{,i,y}>: package(ppx_compare)
<async/*.ml{,i,y}>: package(ppx_deriving.std)
<async/*.ml{,i,y}>: package(ppx_enumerate)
<async/*.ml{,i,y}>: package(ppx_fields_conv)
<async/*.ml{,i,y}>: package(ppx_sexp_conv)
<async/*.ml{,i,y}>: package(ppx_type_conv)
<async/*.ml{,i,y}>: package(sedlex)
<async/*.ml{,i,y}>: package(sexplib)
<async/*.ml{,i,y}>: package(str)
<async/*.ml{,i,y}>: package(tcpip)
<async/*.ml{,i,y}>: package(tcpip.unix)
<async/*.ml{,i,y}>: package(threads)
<async/*.ml{,i,y}>: package(yojson)
<async/*.ml{,i,y}>: use_frenetic
# Executable frenetic
"frenetic/frenetic.native": package(async)
"frenetic/frenetic.native": package(async_extended)
"frenetic/frenetic.native": package(base64)
"frenetic/frenetic.native": package(cohttp)
"frenetic/frenetic.native": package(cohttp.async)
"frenetic/frenetic.native": package(compiler-libs.common)
"frenetic/frenetic.native": package(core)
"frenetic/frenetic.native": package(cstruct)
"frenetic/frenetic.native": package(cstruct-async)
"frenetic/frenetic.native": package(cstruct.async)
"frenetic/frenetic.native": package(cstruct.ppx)
"frenetic/frenetic.native": package(ipaddr)
"frenetic/frenetic.native": package(menhirLib)
"frenetic/frenetic.native": package(mparser)
"frenetic/frenetic.native": package(mparser.re)
"frenetic/frenetic.native": package(ocamlgraph)
"frenetic/frenetic.native": package(ppx_compare)
"frenetic/frenetic.native": package(ppx_deriving.std)
"frenetic/frenetic.native": package(ppx_enumerate)
"frenetic/frenetic.native": package(ppx_fields_conv)
"frenetic/frenetic.native": package(ppx_sexp_conv)
"frenetic/frenetic.native": package(ppx_type_conv)
"frenetic/frenetic.native": package(sedlex)
"frenetic/frenetic.native": package(sexplib)
"frenetic/frenetic.native": package(str)
"frenetic/frenetic.native": package(tcpip)
"frenetic/frenetic.native": package(tcpip.unix)
"frenetic/frenetic.native": package(threads)
"frenetic/frenetic.native": package(yojson)
"frenetic/frenetic.native": use_frenetic
"frenetic/frenetic.native": use_frenetic_async
# Executable openflow
"frenetic/openflow.native": package(async)
"frenetic/openflow.native": package(async_extended)
"frenetic/openflow.native": package(base64)
"frenetic/openflow.native": package(cohttp)
"frenetic/openflow.native": package(cohttp.async)
"frenetic/openflow.native": package(compiler-libs.common)
"frenetic/openflow.native": package(core)
"frenetic/openflow.native": package(cstruct)
"frenetic/openflow.native": package(cstruct-async)
"frenetic/openflow.native": package(cstruct.async)
"frenetic/openflow.native": package(cstruct.ppx)
"frenetic/openflow.native": package(ipaddr)
"frenetic/openflow.native": package(menhirLib)
"frenetic/openflow.native": package(mparser)
"frenetic/openflow.native": package(mparser.re)
"frenetic/openflow.native": package(ocamlgraph)
"frenetic/openflow.native": package(ppx_compare)
"frenetic/openflow.native": package(ppx_deriving.std)
"frenetic/openflow.native": package(ppx_enumerate)
"frenetic/openflow.native": package(ppx_fields_conv)
"frenetic/openflow.native": package(ppx_sexp_conv)
"frenetic/openflow.native": package(ppx_type_conv)
"frenetic/openflow.native": package(sedlex)
"frenetic/openflow.native": package(sexplib)
"frenetic/openflow.native": package(str)
"frenetic/openflow.native": package(tcpip)
"frenetic/openflow.native": package(tcpip.unix)
"frenetic/openflow.native": package(threads)
"frenetic/openflow.native": package(yojson)
"frenetic/openflow.native": use_frenetic
"frenetic/openflow.native": use_frenetic_async
<frenetic/*.ml{,i,y}>: package(async)
<frenetic/*.ml{,i,y}>: package(async_extended)
<frenetic/*.ml{,i,y}>: package(base64)
<frenetic/*.ml{,i,y}>: package(cohttp)
<frenetic/*.ml{,i,y}>: package(cohttp.async)
<frenetic/*.ml{,i,y}>: package(compiler-libs.common)
<frenetic/*.ml{,i,y}>: package(core)
<frenetic/*.ml{,i,y}>: package(cstruct)
<frenetic/*.ml{,i,y}>: package(cstruct-async)
<frenetic/*.ml{,i,y}>: package(cstruct.async)
<frenetic/*.ml{,i,y}>: package(cstruct.ppx)
<frenetic/*.ml{,i,y}>: package(ipaddr)
<frenetic/*.ml{,i,y}>: package(menhirLib)
<frenetic/*.ml{,i,y}>: package(mparser)
<frenetic/*.ml{,i,y}>: package(mparser.re)
<frenetic/*.ml{,i,y}>: package(ocamlgraph)
<frenetic/*.ml{,i,y}>: package(ppx_compare)
<frenetic/*.ml{,i,y}>: package(ppx_deriving.std)
<frenetic/*.ml{,i,y}>: package(ppx_enumerate)
<frenetic/*.ml{,i,y}>: package(ppx_fields_conv)
<frenetic/*.ml{,i,y}>: package(ppx_sexp_conv)
<frenetic/*.ml{,i,y}>: package(ppx_type_conv)
<frenetic/*.ml{,i,y}>: package(sedlex)
<frenetic/*.ml{,i,y}>: package(sexplib)
<frenetic/*.ml{,i,y}>: package(str)
<frenetic/*.ml{,i,y}>: package(tcpip)
<frenetic/*.ml{,i,y}>: package(tcpip.unix)
<frenetic/*.ml{,i,y}>: package(threads)
<frenetic/*.ml{,i,y}>: package(yojson)
<frenetic/*.ml{,i,y}>: use_frenetic
<frenetic/*.ml{,i,y}>: use_frenetic_async
# Library test_frenetic
"lib_test/lib/test_frenetic.cmxs": use_test_frenetic
<lib_test/lib/*.ml{,i,y}>: package(base64)
<lib_test/lib/*.ml{,i,y}>: package(compiler-libs.common)
<lib_test/lib/*.ml{,i,y}>: package(core)
<lib_test/lib/*.ml{,i,y}>: package(cstruct)
<lib_test/lib/*.ml{,i,y}>: package(cstruct.ppx)
<lib_test/lib/*.ml{,i,y}>: package(ipaddr)
<lib_test/lib/*.ml{,i,y}>: package(menhirLib)
<lib_test/lib/*.ml{,i,y}>: package(ocamlgraph)
<lib_test/lib/*.ml{,i,y}>: package(ppx_compare)
<lib_test/lib/*.ml{,i,y}>: package(ppx_deriving.std)
<lib_test/lib/*.ml{,i,y}>: package(ppx_enumerate)
<lib_test/lib/*.ml{,i,y}>: package(ppx_fields_conv)
<lib_test/lib/*.ml{,i,y}>: package(ppx_sexp_conv)
<lib_test/lib/*.ml{,i,y}>: package(ppx_type_conv)
<lib_test/lib/*.ml{,i,y}>: package(quickcheck)
<lib_test/lib/*.ml{,i,y}>: package(sedlex)
<lib_test/lib/*.ml{,i,y}>: package(sexplib)
<lib_test/lib/*.ml{,i,y}>: package(str)
<lib_test/lib/*.ml{,i,y}>: package(tcpip)
<lib_test/lib/*.ml{,i,y}>: package(tcpip.unix)
<lib_test/lib/*.ml{,i,y}>: package(threads)
<lib_test/lib/*.ml{,i,y}>: package(yojson)
<lib_test/lib/*.ml{,i,y}>: use_frenetic
# Executable testtool
"lib_test/Test.byte": package(async)
"lib_test/Test.byte": package(base64)
"lib_test/Test.byte": package(cohttp)
"lib_test/Test.byte": package(cohttp.async)
"lib_test/Test.byte": package(compiler-libs.common)
"lib_test/Test.byte": package(core)
"lib_test/Test.byte": package(cstruct)
"lib_test/Test.byte": package(cstruct-async)
"lib_test/Test.byte": package(cstruct.async)
"lib_test/Test.byte": package(cstruct.ppx)
"lib_test/Test.byte": package(ipaddr)
"lib_test/Test.byte": package(menhirLib)
"lib_test/Test.byte": package(mparser)
"lib_test/Test.byte": package(mparser.re)
"lib_test/Test.byte": package(ocamlgraph)
"lib_test/Test.byte": package(ppx_compare)
"lib_test/Test.byte": package(ppx_deriving.std)
"lib_test/Test.byte": package(ppx_enumerate)
"lib_test/Test.byte": package(ppx_fields_conv)
"lib_test/Test.byte": package(ppx_inline_test)
"lib_test/Test.byte": package(ppx_sexp_conv)
"lib_test/Test.byte": package(ppx_type_conv)
"lib_test/Test.byte": package(quickcheck)
"lib_test/Test.byte": package(sedlex)
"lib_test/Test.byte": package(sexplib)
"lib_test/Test.byte": package(str)
"lib_test/Test.byte": package(tcpip)
"lib_test/Test.byte": package(tcpip.unix)
"lib_test/Test.byte": package(threads)
"lib_test/Test.byte": package(yojson)
"lib_test/Test.byte": use_frenetic
"lib_test/Test.byte": use_frenetic_async
"lib_test/Test.byte": use_test_frenetic
<lib_test/*.ml{,i,y}>: package(async)
<lib_test/*.ml{,i,y}>: package(base64)
<lib_test/*.ml{,i,y}>: package(cohttp)
<lib_test/*.ml{,i,y}>: package(cohttp.async)
<lib_test/*.ml{,i,y}>: package(compiler-libs.common)
<lib_test/*.ml{,i,y}>: package(core)
<lib_test/*.ml{,i,y}>: package(cstruct)
<lib_test/*.ml{,i,y}>: package(cstruct-async)
<lib_test/*.ml{,i,y}>: package(cstruct.async)
<lib_test/*.ml{,i,y}>: package(cstruct.ppx)
<lib_test/*.ml{,i,y}>: package(ipaddr)
<lib_test/*.ml{,i,y}>: package(menhirLib)
<lib_test/*.ml{,i,y}>: package(mparser)
<lib_test/*.ml{,i,y}>: package(mparser.re)
<lib_test/*.ml{,i,y}>: package(ocamlgraph)
<lib_test/*.ml{,i,y}>: package(ppx_compare)
<lib_test/*.ml{,i,y}>: package(ppx_deriving.std)
<lib_test/*.ml{,i,y}>: package(ppx_enumerate)
<lib_test/*.ml{,i,y}>: package(ppx_fields_conv)
<lib_test/*.ml{,i,y}>: package(ppx_inline_test)
<lib_test/*.ml{,i,y}>: package(ppx_sexp_conv)
<lib_test/*.ml{,i,y}>: package(ppx_type_conv)
<lib_test/*.ml{,i,y}>: package(quickcheck)
<lib_test/*.ml{,i,y}>: package(sedlex)
<lib_test/*.ml{,i,y}>: package(sexplib)
<lib_test/*.ml{,i,y}>: package(str)
<lib_test/*.ml{,i,y}>: package(tcpip)
<lib_test/*.ml{,i,y}>: package(tcpip.unix)
<lib_test/*.ml{,i,y}>: package(threads)
<lib_test/*.ml{,i,y}>: package(yojson)
<lib_test/*.ml{,i,y}>: use_frenetic
<lib_test/*.ml{,i,y}>: use_frenetic_async
<lib_test/*.ml{,i,y}>: use_test_frenetic
# Executable benchmark
<bench/src/Main.{native,byte}>: package(base64)
<bench/src/Main.{native,byte}>: package(compiler-libs.common)
<bench/src/Main.{native,byte}>: package(core)
<bench/src/Main.{native,byte}>: package(cstruct)
<bench/src/Main.{native,byte}>: package(cstruct.ppx)
<bench/src/Main.{native,byte}>: package(ipaddr)
<bench/src/Main.{native,byte}>: package(menhirLib)
<bench/src/Main.{native,byte}>: package(ocamlgraph)
<bench/src/Main.{native,byte}>: package(ppx_compare)
<bench/src/Main.{native,byte}>: package(ppx_deriving.std)
<bench/src/Main.{native,byte}>: package(ppx_enumerate)
<bench/src/Main.{native,byte}>: package(ppx_fields_conv)
<bench/src/Main.{native,byte}>: package(ppx_sexp_conv)
<bench/src/Main.{native,byte}>: package(ppx_type_conv)
<bench/src/Main.{native,byte}>: package(sedlex)
<bench/src/Main.{native,byte}>: package(sexplib)
<bench/src/Main.{native,byte}>: package(str)
<bench/src/Main.{native,byte}>: package(tcpip)
<bench/src/Main.{native,byte}>: package(tcpip.unix)
<bench/src/Main.{native,byte}>: package(threads)
<bench/src/Main.{native,byte}>: package(yojson)
<bench/src/Main.{native,byte}>: use_frenetic
<bench/src/*.ml{,i,y}>: package(base64)
<bench/src/*.ml{,i,y}>: package(compiler-libs.common)
<bench/src/*.ml{,i,y}>: package(core)
<bench/src/*.ml{,i,y}>: package(cstruct)
<bench/src/*.ml{,i,y}>: package(cstruct.ppx)
<bench/src/*.ml{,i,y}>: package(ipaddr)
<bench/src/*.ml{,i,y}>: package(menhirLib)
<bench/src/*.ml{,i,y}>: package(ocamlgraph)
<bench/src/*.ml{,i,y}>: package(ppx_compare)
<bench/src/*.ml{,i,y}>: package(ppx_deriving.std)
<bench/src/*.ml{,i,y}>: package(ppx_enumerate)
<bench/src/*.ml{,i,y}>: package(ppx_fields_conv)
<bench/src/*.ml{,i,y}>: package(ppx_sexp_conv)
<bench/src/*.ml{,i,y}>: package(ppx_type_conv)
<bench/src/*.ml{,i,y}>: package(sedlex)
<bench/src/*.ml{,i,y}>: package(sexplib)
<bench/src/*.ml{,i,y}>: package(str)
<bench/src/*.ml{,i,y}>: package(tcpip)
<bench/src/*.ml{,i,y}>: package(tcpip.unix)
<bench/src/*.ml{,i,y}>: package(threads)
<bench/src/*.ml{,i,y}>: package(yojson)
<bench/src/*.ml{,i,y}>: use_frenetic
# OASIS_STOP
<lib/Frenetic_NetKAT_Lexer.*>: package(ppx_import)
# see https://github.com/janestreet/ppx_inline_test/issues/3
<lib_test/*.ml{,i}>: predicate(ppx_driver)
<lib_test/*.ml{,i}>: pp(ppx-jane -dump-ast -inline-test-lib frenetic)
true: thread
true: -traverse
# SJS: use shared extern token file (-> see myocamlbuild.ml)
true: extern_tokens
