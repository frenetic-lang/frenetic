# OASIS_START
# DO NOT EDIT (digest: a51cdb81c903d6676f1c30ba79355add)
version = "4.0.0"
description = "The Frenetic Compiler and Runtime System"
requires =
"base64 core cstruct cstruct.ppx ocamlgraph str tcpip tcpip.unix yojson ipaddr ppx_deriving.std ppx_compare ppx_enumerate ppx_fields_conv ppx_type_conv ppx_sexp_conv sexplib sedlex menhirLib threads compiler-libs.common"
archive(byte) = "frenetic.cma"
archive(byte, plugin) = "frenetic.cma"
archive(native) = "frenetic.cmxa"
archive(native, plugin) = "frenetic.cmxs"
exists_if = "frenetic.cma"
package "test" (
 version = "4.0.0"
 description = "The Frenetic Compiler and Runtime System"
 requires = "frenetic quickcheck"
 archive(byte) = "test_frenetic.cma"
 archive(byte, plugin) = "test_frenetic.cma"
 archive(native) = "test_frenetic.cmxa"
 archive(native, plugin) = "test_frenetic.cmxs"
 exists_if = "test_frenetic.cma"
)


package "async" (
 version = "4.0.0"
 description = "The Frenetic Compiler and Runtime System"
 requires =
 "async cohttp cohttp.async core cstruct cstruct-async cstruct.async frenetic mparser mparser.re ppx_sexp_conv str"
 archive(byte) = "frenetic_async.cma"
 archive(byte, plugin) = "frenetic_async.cma"
 archive(native) = "frenetic_async.cmxa"
 archive(native, plugin) = "frenetic_async.cmxs"
 exists_if = "frenetic_async.cma"
)
# OASIS_STOP


package "ppx" (
  version = "0.1"
  description = "NetKAT syntax extension"

  # The following line must list the ppx dependencies of the rewriter
  # itself, such as ppx_core, ppx_type_conv, ...
  requires = "ppx_driver ppx_tools ppx_tools ppx_tools.metaquot"

  # The following line is optional, here you can list normal libraries
  # that you are using inside the ppx rewriter. For instance if you are
  # using the "str" library in the rewriter itself, put it here
  requires(ppx_driver) = "frenetic"

  # The following line is for runtime dependencies, this allow users to
  # just put ppx_foo as dependency and get both the rewriter and the
  # runtime dependencies
  requires(-ppx_driver)        += ""

  # The following line is optional, it is currently only used by
  # toplevel_expect_test, which is a toplevel where the rewriting
  # happens in the same process as the toplevel itself. This is useful
  # for defining transformations and testing them immediately after
  requires(ppx_driver,toploop) += ""

  # The next 5 lines are classic. The only difference with a normal
  # library is that the archive is linked only if the "ppx_driver"
  # predicate is present. This is to avoid linked them in the final
  # executable itself
  archive(ppx_driver, byte  ) = "ppx.cma"
  archive(ppx_driver, native) = "ppx.cmxa"
  plugin(ppx_driver, byte  ) = "ppx.cma"
  plugin(ppx_driver, native) = "ppx.cmxs"
  exists_if = "ppx.cma"

  # The following line instruct ocamlfind to pass "-ppx ./ppx" to the
  # OCaml compiler when none of the "ppx_driver" or "custom_ppx"
  # predicates are present. This explains why we need to
  # "predicate(custom_ppx)" when using ppx_driver
  ppx(-ppx_driver,-custom_ppx) = "./ppx.native"
)
